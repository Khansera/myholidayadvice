<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.18.2/dist/tagify.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.0.1/remixicon.min.css"
        integrity="sha512-dTsohxprpcruDm4sjU92K0/Gf1nTKVVskNHLOGMqxmokBSkfOAyCzYSB6+5Z9UlDafFRpy5xLhvpkOImeFbX6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .itenary-container,
        .important-points-container {
            transform: scale(1);
            transition: all 0.3s ease-out;
        }

        .itenary-container.fade-out {
            transform: scale(0);
        }

        .important-points-container.fade-out {
            transform: scale(0);

        }
    </style>
</head>

<body>
    <div class="container-fluid container-lg">
        <header>
            <h2 class="text-center my-5">Upload Package</h2>
        </header>
        <!--Avatar-->
        <main>
            <div>

                <div class="d-flex justify-content-center mb-4">
                    <img id="selectedAvatar" src="https://mdbootstrap.com/img/Photos/Others/placeholder-avatar.jpg"
                        class="rounded-circle" style="width: 100px; height: 100px; object-fit: cover;"
                        alt="example placeholder" />
                </div>
                <div class="d-flex justify-content-center mb-4">
                    <div class="btn btn-primary btn-rounded">
                        <label class="form-label text-white m-1" for="picture">Choose Image</label>
                        <input type="file" class="form-control d-none" id="picture" accept="*/image" name="picture"
                            onchange="displaySelectedImage(event, 'selectedAvatar')" />
                    </div>
                </div>
            </div>
            <div class="details">
                <form action="" id="package-upload">
                    <div class="mb-3">
                        <label for="packageName">Package Name</label>
                        <input type="text" name="packageName" class="form-control" id="packageName">
                    </div>
                    <div class="mb-3">
                        <label for="Destinations">Destinations</label>
                        <input type="text" name="Destinations" class="form-control" id="Destinations">
                    </div>
                    <div class="mb-3">
                        <label for="duration">Duration</label>
                        <input type="text" name="duration" class="form-control" id="duration"
                            placeholder="6 Days / 7 Nights">
                    </div>
                    <div class="mb-3">
                        <label for="pkgType">Package Type</label>
                        <input type="text" name="pkgType" class="form-control" id="pkgType"
                            placeholder="Domestic/International/Adventure">
                    </div>
                    <div class="mb-3" id="itenary">
                        <label for="iternaryPoints">Itenary Points</label>
                        <input type="number" class="form-control" id="iternaryPoints"
                            placeholder="type number of Points">
                        <button type="button" class="btn btn-sm btn-primary my-3" id="generate-inputs">Generate</button>
                    </div>
                    <div class="mb-3" id="important-points">
                        <label for="importantPoints">Important Points</label>
                        <input type="number" class="form-control" id="importantPoints"
                            placeholder="type number of Points">
                        <button type="button" class="btn btn-sm btn-primary my-3"
                            id="generate-inputs-2">Generate</button>
                    </div>
                    <div class="mb-3">
                        <label for="advisor">Advisor Name</label>
                        <input type="text" name="advisor" class="form-control" id="advisor"
                            placeholder="Domestic/International/Adventure">
                    </div>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
            </div>

        </main>

    </div>














    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@yaireo/tagify"></script>
    <script src="
    https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.18.2/dist/tagify.min.js
    "></script>




    <script>

        var input = document.querySelector('input[name=Destinations]');

        new Tagify(input)


        function displaySelectedImage(event, elementId) {
            const selectedImage = document.getElementById(elementId);
            const fileInput = event.target;

            if (fileInput.files && fileInput.files[0]) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    selectedImage.src = e.target.result;
                };

                reader.readAsDataURL(fileInput.files[0]);
            }
        }

        function insertInput(button) {
        const newInput = document.createElement('input');
        newInput.type = 'text';
        newInput.placeholder = 'Point';
        newInput.classList.add('form-control','mt-3')

        const container = button.closest('.important-points-container');

        if (container) {
            const lastChild = container.lastElementChild;

            container.insertBefore(newInput, lastChild);
        } else {
            console.error('Container not found.');
        }
    }

        function removePoints(target) {
            let grandParent;
            const item_to_remove = document.querySelectorAll(target);
            item_to_remove.forEach((element) => {
                element.addEventListener('click', () => {
                    grandParent = element.parentNode.parentNode;
                    grandParent.classList.add('fade-out');

                    setTimeout(() => {
                        grandParent.remove();
                    }, 500);
                })
            })
        }


        function createPoints(length, elementName, target, containerClass, maxElements, inputName) {

            const existingElements = document.querySelectorAll(`.${containerClass}`);
            if (existingElements.length >= maxElements) {
                alert('Maximum limit reached. Cannot add more elements.');
                return;
            }

            const elementsToAdd = Math.min(length, maxElements - existingElements.length);

            for (let i = 0; i < elementsToAdd; i++) {
                const element = document.createElement(elementName);
                element.classList.add('mb-3', containerClass);
                if(containerClass==='itenary-container'){
                    element.innerHTML = `
            <p class="text-end my-2">
                <i class="ri-delete-bin-5-fill fs-3 btn-del" ></i>
            </p>
            <input type="text" class="form-control mb-3 bg-light" id="input-${inputName}-${i}" placeholder="Heading">
            <textarea  class="form-control" id="text-${inputName}-${i}" placeholder="Description"></textarea>
        `;
                }else{
                element.innerHTML = `
            <p class="text-end my-2">
                <i class="ri-delete-bin-5-fill fs-3 btn-del" ></i>
            </p>
            <input type="text" class="form-control mb-3 bg-light" id="input-${inputName}-${i}" placeholder="Heading">
            <input  class="form-control" id="text-${inputName}-${i}" placeholder="Point"></input>
            <div class="text-center"><button type="button" onclick=insertInput(this) class="text-center mt-3 btn btn-primary" ><i class="ri-add-box-fill fs-3"></i></button></div>
        `;        
        }
                target.append(element);
            }
            window.scrollBy(0, 50);
        }



 
        //...........................................................................//



        //.....................//
        const generate_btn = document.getElementById('generate-inputs');
        const generate_input = document.getElementById('iternaryPoints');
        const itenary = document.getElementById('itenary');

        generate_btn.addEventListener('click', () => {
            createPoints(Number(generate_input.value), 'div', itenary, 'itenary-container', 20, 'itenary')
            removePoints('.btn-del')
        });
        //.....................................................................//
        const important_points = document.getElementById('important-points');
        const generate_btn_2 = document.getElementById('generate-inputs-2');
        const input_important_points = document.getElementById('importantPoints')
        generate_btn_2.addEventListener('click', () => {
            createPoints(Number(input_important_points.value), 'div', important_points, 'important-points-container', 4, 'important')
            removePoints('.btn-del');   
        });
        //.............................................................................//
        function creatArray(container) {
            const elements = document.querySelectorAll(container);


            const dataArray = Array.from(elements).map(element => {
                const heading = element.querySelector('input').value;
                if(container!=='.important-points-container'){
                const description = element.querySelector('textarea').value;
                return {
                    heading,
                    description
                };
                }else{
                    const notes=[];
                    const inputs=element.querySelectorAll('input');
                   for(let i=1; i<inputs.length; i++){
                    notes.push(inputs[i].value);
                   }
                   return {
                    heading,
                    notes
                    
                };
                }
          
            });

            return dataArray;
        }





        const package_upload_form = document.getElementById('package-upload');

        package_upload_form.addEventListener('submit', (e) => {
            e.preventDefault()
            const picture=document.getElementById('picture');
            const itenary_data=JSON.stringify(creatArray('.itenary-container'));
            const important_info_data=JSON.stringify(creatArray('.important-points-container'));
            const form_data = new FormData(package_upload_form)
            form_data.append('picture',picture.files[0])
            form_data.append('tourInfo', itenary_data)
            form_data.append('importantInfo', important_info_data)
            
            for (const entry of form_data.entries()) {
            console.log(`${entry[0]}: ${entry[1]}`);
        }

            fetch('/admin/upload-package', {
                method: 'POST',
                body: form_data,
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: "Success",
                            text: "Package Uploaded Successfully",
                            icon: "success",
                            confirmButtonColor: '#f87c00'

                        });
                        
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: data.message,
                            icon: "error",
                            confirmButtonColor: '#f87c00',

                        });
                    }

                })
                .catch(error => {
                    console.error(error);
                    Swal.fire({
                        title: "Error",
                        text: "Internel Server Error",
                        icon: "error",
                        confirmButtonColor: '#f87c00'

                    });
                });

        })














    </script>
</body>

</html>